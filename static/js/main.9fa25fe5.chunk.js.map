{"version":3,"sources":["component/Register/index.tsx","component/Login/index.tsx","component/Logout/index.tsx","store/ducks/jwtInfoState.ts","component/Home/index.tsx","component/Machine/index.tsx","constants.tsx","component/AssignMachine/index.tsx","component/AssignList/index.tsx","component/OperatorList/index.tsx","component/Nav/index.tsx","App.tsx","serviceWorker.ts","store/index.tsx","index.tsx"],"names":["Register","props","handleSubmit","event","preventDefault","state","username","email","password","type","alert","formData","axios","post","process","headers","then","response","setState","isFormSUbmitted","window","scrollTo","catch","error","onChangeHandler","value","selectedValue","isFormSubmitted","this","label","Row","style","marginBottom","Col","sm","size","order","offset","className","Alert","color","Form","onSubmit","FormGroup","Label","for","Input","name","id","placeholder","onChange","e","target","multi","options","Button","React","Component","Login","isLoading","data","cookies","Cookies","set","access_token","path","refresh_token","user_type","shouldComponentRedirect","errorMessage","console","log","to","css","loading","Logout","isCookiesDeleted","get","undefined","remove","setHasTokenStatusAction","hasToken","initialState","SeamlessImmutable","getHasTokenStatus","Home","userData","isAccessTokenExpired","isRefreshTokenExpired","hasMessage","setHasTokenStatusActionCreator","status","getUserData","message","mapDispatchToProps","ConnectedHome","connect","Machine","handleShow","show","handleDelete","a","buttonName","machineId","toString","split","confirm","delete","location","reload","handleShowEdit","machineName","machineType","machineCode","code","isUpdate","handleClose","handleUpdate","patch","modalText","machineList","muiMachineList","machineIdList","i","forEach","element","arr","push","_id","columns","filter","sort","empty","customBodyRenderLite","dataIndex","rowIndex","onClick","variant","title","selectableRows","Modal","onHide","Header","closeButton","Title","Body","row","required","Footer","ConnectedMachine","shifts","AssignMachine","operatorName","operatorCode","shiftId","assignDate","operator_id","operator_name","machine_id","machine_code","shift","assigned_date","submitMessage","updateCategory","operatorInfoList","onChangeMachineHandler","onChangeShiftHandler","onChangeDateHandler","currentTarget","isOpen","operatorList","selectedMachineValue","selectedShiftValue","defaultAssignDateValue","alertMessage","muiOperatorList","count","machineListOptions","map","elem","check","InputGroup","readOnly","AssignList","assignList","muiAssignList","ConnectedAssignList","OperatorList","onChangeStartDateHandler","start_date","onChangeEndDateHandler","end_date","submitFilter","getOperatorList","startDate","endDate","ConnectedOperatorList","NavBar","toggle","bind","Navbar","dark","expand","NavbarBrand","href","NavbarToggler","Collapse","navbar","Nav","NavItem","NavLink","activeClassName","tag","RRNavLink","exact","component","ConnectedNavBar","footerStyle","position","backgroundColor","fontSize","borderTop","textAlign","padding","left","bottom","height","width","textColor","baseStyle","App","key","Boolean","hostname","match","store","createStore","action","composeWithDevTools","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9fa25fe5.chunk.js","sourcesContent":["import React from \"react\";\nimport {\n  Button,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  Row,\n  Col,\n  Alert\n} from \"reactstrap\";\nimport axios from \"axios\";\nimport Select from \"react-select\";\n\ninterface RegisterState {\n  username: string;\n  email: any;\n  password: any;\n  isFormSUbmitted: null | boolean;\n  type: string;\n}\n\nclass Register extends React.Component<{}, RegisterState> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      username: \"\",\n      email: \"\",\n      password: \"\",\n      isFormSUbmitted: null,\n      type: \"\"\n    };\n  }\n\n  handleSubmit = (event: any) => {\n    event.preventDefault();\n    if (\n      this.state.username === \"\" ||\n      this.state.email === \"\" ||\n      this.state.password === \"\" ||\n      this.state.type === \"\"\n    ) {\n      alert(\"Empty field!\");\n    } else {\n      const formData = {\n        username: this.state.username,\n        email: this.state.email,\n        password: this.state.password,\n        type: this.state.type\n      };\n\n      axios\n        .post(\n          process.env.REACT_APP_BASE_API_URL + \"/users/registration\",\n          formData,\n          {\n            headers: {}\n          }\n        )\n        .then(response => {\n          this.setState({\n            isFormSUbmitted: true,\n            username: \"\",\n            email: \"\",\n            password: \"\"\n          });\n          window.scrollTo(0, 0);\n        })\n        .catch(error => {\n          if (error.response) {\n            this.setState({ isFormSUbmitted: false });\n            window.scrollTo(0, 0);\n          }\n        });\n    }\n  };\n\n  /** sets the value of field element in state\n   * @param {any} event - the onchange input event\n   */\n  private onChangeHandler = (event: any) => {\n    this.setState({ type: event.value || \"\" });\n  };\n\n  render() {\n    const isFormSubmitted = this.state.isFormSUbmitted;\n    const options = [\n      { value: \"admin\", label: \"Admin\" },\n      { value: \"operator\", label: \"Operator\" }\n    ];\n    let selectedValue: any;\n    selectedValue = this.state.type;\n    if (selectedValue !== \"\") {\n      if (selectedValue === \"admin\") {\n        selectedValue = { value: \"admin\", label: \"Admin\" };\n      } else {\n        selectedValue = { value: \"operator\", label: \"Operator\" };\n      }\n    }\n\n    return (\n      <Row style={{ marginBottom: \"150px\" }}>\n        <Col\n          sm={{ size: 6, order: 2, offset: 1 }}\n          className=\"LoginFormFieldBody\"\n        >\n          <br></br>\n          {isFormSubmitted !== null &&\n            (isFormSubmitted === true ? (\n              <Alert color=\"success\">\n                Registration Successful. Login to continue.\n              </Alert>\n            ) : (\n              <Alert color=\"danger\">\n                Duplicate Username or An Error Occured!.\n              </Alert>\n            ))}\n          <h1>Registration</h1>\n          <hr></hr>\n          <Form onSubmit={this.handleSubmit}>\n            <FormGroup>\n              <Label for=\"exampleusername\">Username</Label>\n              <Input\n                type=\"text\"\n                name=\"username\"\n                id=\"username\"\n                placeholder=\"\"\n                value={this.state.username}\n                onChange={e => this.setState({ username: e.target.value })}\n              />\n            </FormGroup>\n            <FormGroup>\n              <Label for=\"examplePassword\">Register As: </Label>\n              <Select\n                multi={false}\n                name={\"reg-as\"}\n                options={options}\n                value={selectedValue || \"\"}\n                onChange={this.onChangeHandler}\n              />\n            </FormGroup>\n            <FormGroup>\n              <Label for=\"exampleEmail\">Email</Label>\n              <Input\n                type=\"email\"\n                name=\"email\"\n                id=\"email\"\n                placeholder=\"example@abc.com\"\n                value={this.state.email}\n                onChange={e => this.setState({ email: e.target.value })}\n              />\n            </FormGroup>\n            <FormGroup>\n              <Label for=\"examplePassword\">Password</Label>\n              <Input\n                type=\"password\"\n                name=\"password\"\n                id=\"password\"\n                placeholder=\"\"\n                value={this.state.password}\n                onChange={e => this.setState({ password: e.target.value })}\n              />\n            </FormGroup>\n            <Button type=\"submit\">Submit</Button>\n          </Form>\n        </Col>\n      </Row>\n    );\n  }\n}\n\nexport default Register;\n","import React from \"react\";\nimport axios from \"axios\";\nimport Cookies from \"universal-cookie\";\nimport {\n  Button,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  Row,\n  Col,\n  Alert\n} from \"reactstrap\";\nimport { Redirect } from \"react-router-dom\";\nimport { BeatLoader } from \"react-spinners\";\n\ninterface LoginState {\n  username: string;\n  password: any;\n  isFormSubmitted: null | boolean;\n  shouldComponentRedirect: boolean;\n  errorMessage: null | string;\n  isLoading: boolean;\n}\n\nclass Login extends React.Component<{}, LoginState> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      username: \"\",\n      password: \"\",\n      isFormSubmitted: null,\n      shouldComponentRedirect: false,\n      errorMessage: null,\n      isLoading: false\n    };\n  }\n\n  handleSubmit = (event: any) => {\n    event.preventDefault();\n    if (this.state.username === \"\" || this.state.password === \"\") {\n      alert(\"Empty field!\");\n    } else {\n      this.setState({ isLoading: true });\n      const data = {\n        username: this.state.username,\n        password: this.state.password\n      };\n\n      axios\n        .post(process.env.REACT_APP_BASE_API_URL + \"/users/login\", data, {\n          headers: {}\n        })\n        .then(response => {\n          const cookies = new Cookies();\n          cookies.set(\"access_token\", response.data.data.access_token, {\n            path: \"/\"\n          });\n          cookies.set(\"refresh_token\", response.data.data.refresh_token, {\n            path: \"/\"\n          });\n          cookies.set(\"user_type\", response.data.data.user_type, {\n            path: \"/\"\n          });\n          this.setState({\n            isFormSubmitted: true,\n            username: \"\",\n            password: \"\",\n            shouldComponentRedirect: true,\n            errorMessage: null,\n            isLoading: false\n          });\n        })\n        .catch(error => {\n          if (error.response) {\n            this.setState({\n              isFormSubmitted: false,\n              errorMessage: error.response.data[\"message\"],\n              isLoading: false\n            });\n            console.log(error.response.data);\n          }\n        });\n    }\n  };\n\n  render() {\n    const override = `\n    display: block;\n    margin-left: 10px;\n    border-color: #0b5679;\n    margin-top: 10px;\n    `;\n    if (!this.state.shouldComponentRedirect) {\n      return (\n        <Row>\n          <Col\n            sm={{ size: 6, order: 2, offset: 1 }}\n            className=\"LoginFormFieldBody\"\n          >\n            <br></br>\n            {this.state.errorMessage != null ? (\n              <Alert color=\"danger\">{this.state.errorMessage}</Alert>\n            ) : null}\n            <h1>Login</h1>\n            <hr></hr>\n            <Form onSubmit={this.handleSubmit}>\n              <FormGroup>\n                <Label for=\"username\">Username</Label>\n                <Input\n                  type=\"text\"\n                  name=\"username\"\n                  id=\"username\"\n                  placeholder=\"\"\n                  value={this.state.username}\n                  onChange={e => this.setState({ username: e.target.value })}\n                />\n              </FormGroup>\n              <FormGroup>\n                <Label for=\"password\">Password</Label>\n                <Input\n                  type=\"password\"\n                  name=\"password\"\n                  id=\"password\"\n                  placeholder=\"\"\n                  value={this.state.password}\n                  onChange={e => this.setState({ password: e.target.value })}\n                />\n              </FormGroup>\n              <Button type=\"submit\">Login</Button>\n              {this.state.isLoading === true ? (\n                <span>\n                  <BeatLoader css={override} size={10} loading={true} />\n                </span>\n              ) : null}\n            </Form>\n          </Col>\n        </Row>\n      );\n    } else {\n      return <Redirect to=\"/home\" />;\n    }\n  }\n}\n\nexport default Login;\n","import React from \"react\";\nimport { Alert, Row, Col } from \"reactstrap\";\nimport Cookies from \"universal-cookie\";\nimport { Redirect } from \"react-router-dom\";\n\ninterface LogoutState {\n  isCookiesDeleted: null | boolean;\n}\n\nclass Logout extends React.Component<{}, LogoutState> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      isCookiesDeleted: false\n    };\n  }\n\n  public componentDidMount() {\n    const cookies = new Cookies();\n    const access_token = cookies.get(\"access_token\");\n    if (access_token !== null || access_token === undefined) {\n      cookies.remove(\"access_token\");\n      cookies.remove(\"refresh_token\");\n      cookies.remove(\"user_type\");\n      this.setState({ isCookiesDeleted: true });\n    }\n  }\n\n  render() {\n    if (this.state.isCookiesDeleted === true) {\n      return <Redirect to=\"/home\" />;\n    } else {\n      return (\n        <Row>\n          <Col sm={{ size: 10, order: 2, offset: 1 }}>\n            <br></br>\n            <Alert color=\"danger\">Error Occured!</Alert>\n          </Col>\n        </Row>\n      );\n    }\n  }\n}\n\nexport default Logout;\n","import { AnyAction, Store } from \"redux\";\nimport SeamlessImmutable from \"seamless-immutable\";\n\nexport interface JwtInfoState {\n  hasToken: boolean;\n}\n\nexport const SET_HAS_TOKEN_STATUS = \"SET_HAS_TOKEN_STATUS\";\n\n// Actions\n\n/** interface for SET_FORM_SUBMIT_STATUS action */\nexport interface SetHasTokenStatusActionInterface extends AnyAction {\n  hasToken: boolean;\n  type: typeof SET_HAS_TOKEN_STATUS;\n}\n\n// this action method to be used in containers\n/** sets the token info status to redux store\n * @param {boolean} hasToken - the token info variable\n * @returns {SetHasTokenStatusActionInterface} - an action to set token info to redux store\n */\nexport const setHasTokenStatusAction = (\n  hasToken: boolean\n): SetHasTokenStatusActionInterface => ({\n  hasToken,\n  type: SET_HAS_TOKEN_STATUS\n});\n\n/** Create type for token reducer actions */\nexport type tokenActionTypes = SetHasTokenStatusActionInterface | AnyAction;\n\n/** Create an immutable form state */\nexport type ImmutableJwtInfoState = SeamlessImmutable.ImmutableObject<\n  JwtInfoState\n>;\n\n/** initial form state */\nexport const initialState: ImmutableJwtInfoState = SeamlessImmutable({\n  hasToken: false\n});\n\n// Reducers\n\n/** the form reducer function */\nexport default function reducer(\n  state: ImmutableJwtInfoState = initialState,\n  action: tokenActionTypes\n): ImmutableJwtInfoState {\n  switch (action.type) {\n    case SET_HAS_TOKEN_STATUS:\n      return SeamlessImmutable({\n        ...state,\n        hasToken: (action as any).hasToken\n      });\n    default:\n      return state;\n  }\n}\n\n// selectors\n\n/** get the info object from store\n * @param {Partial<Store>} state - the redux store\n * @return {boolean} the current hasToken\n */\nexport function getHasTokenStatus(state: Partial<Store>): any {\n  return (state as any).hasToken;\n}\n","import React from \"react\";\nimport { Alert, Row, Col } from \"reactstrap\";\nimport Cookies from \"universal-cookie\";\nimport { connect } from \"react-redux\";\nimport { Store } from \"redux\";\nimport {\n  getHasTokenStatus,\n  setHasTokenStatusAction\n} from \"../../store/ducks/jwtInfoState\";\nimport axios from \"axios\";\nimport { Redirect } from \"react-router-dom\";\nimport { BeatLoader } from \"react-spinners\";\n\ninterface HomeState {\n  userData: any;\n  isAccessTokenExpired: boolean;\n  isRefreshTokenExpired: boolean;\n  hasMessage: boolean;\n  isLoading: boolean;\n}\n\ninterface HomeProps {\n  setHasTokenStatusActionCreator: typeof setHasTokenStatusAction;\n  hasToken: boolean;\n}\n\nclass Home extends React.Component<HomeProps, HomeState> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      userData: null,\n      isAccessTokenExpired: false,\n      isRefreshTokenExpired: false,\n      hasMessage: false,\n      isLoading: true\n    };\n  }\n\n  public async componentDidMount() {\n    const cookies = new Cookies();\n    const access_token = cookies.get(\"access_token\");\n    const refresh_token = cookies.get(\"refresh_token\");\n\n    if (access_token === null || access_token === undefined) {\n      this.props.setHasTokenStatusActionCreator(false);\n    } else {\n      this.props.setHasTokenStatusActionCreator(true);\n    }\n\n    if (this.state.isAccessTokenExpired === false) {\n      await axios\n        .get(process.env.REACT_APP_BASE_API_URL + \"/users/info\", {\n          headers: { \"x-access-token\": access_token }\n        })\n        .then(response => {\n          this.setState({\n            userData: response.data,\n            hasMessage: true,\n            isLoading: false\n          });\n        })\n        .catch(error => {\n          if (error.response) {\n            if (error.response.data.status === \"401\") {\n              this.setState({ isAccessTokenExpired: true, isLoading: false });\n            } else {\n              this.setState({ isLoading: false });\n              alert(\"An Error occoured!\");\n            }\n          }\n        });\n    }\n\n    // check if refresh token is valid\n    // if refresh token is valid gets a new access token and store it\n    // if refresh token is invalid , redirect to login page, system needs login\n    if (this.state.isAccessTokenExpired === true) {\n      if (access_token !== undefined) {\n        await axios\n          .post(process.env.REACT_APP_BASE_API_URL + \"/users/refresh\", null, {\n            headers: { \"x-access-token\": refresh_token }\n          })\n          .then(response => {\n            const access_token = response.data.data.access_token;\n            cookies.set(\"access_token\", access_token, {\n              path: \"/\"\n            });\n            console.log(\"======= Re-gain Access Token ============\");\n            this.getUserData(access_token);\n          })\n          .catch(error => {\n            if (error.response) {\n              console.log(error.response);\n              this.setState({ isRefreshTokenExpired: true, isLoading: false });\n            }\n          });\n      } else {\n        this.setState({ isRefreshTokenExpired: true, isLoading: false });\n      }\n    }\n  }\n\n  public async getUserData(access_token: any) {\n    await axios\n      .get(process.env.REACT_APP_BASE_API_URL + \"/users/info\", {\n        headers: { \"x-access-token\": access_token }\n      })\n      .then(response => {\n        this.setState({\n          userData: response.data,\n          isAccessTokenExpired: false,\n          hasMessage: true,\n          isLoading: false\n        });\n      })\n      .catch(error => {\n        if (error.response) {\n          console.log(error.response);\n          this.setState({ isRefreshTokenExpired: true, isLoading: false });\n        }\n      });\n  }\n\n  render() {\n    if (this.state.isLoading) {\n      const override = `\n      display: block;\n      margin-left: 48%;\n      border-color: #0b5679;\n      margin-top: 20%;\n      `;\n      return (\n        <div className=\"sweet-loading\">\n          <BeatLoader css={override} size={20} loading={true} />\n        </div>\n      );\n    } else {\n      const name =\n        this.state.userData != null ? this.state.userData.data.username : null;\n      const cookies = new Cookies();\n      const user_type = cookies.get(\"user_type\");\n\n      if (this.props.hasToken === true) {\n        const message =\n          \"Welcome @\" + name + \". You Logged in as \" + user_type + \".\";\n        if (this.state.isRefreshTokenExpired === true) {\n          return <Redirect to=\"/logout\" />;\n        }\n        return (\n          <Row>\n            <Col sm={{ size: 10, order: 2, offset: 1 }}>\n              <br></br>\n              {this.state.hasMessage ? (\n                <Alert color=\"success\">{message} </Alert>\n              ) : null}\n            </Col>\n          </Row>\n        );\n      } else {\n        return (\n          <Row>\n            <Col sm={{ size: 10, order: 2, offset: 1 }}>\n              <br></br>\n              <Alert color=\"primary\">Please Login to continue.</Alert>\n            </Col>\n          </Row>\n        );\n      }\n    }\n  }\n}\n\n/** connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  hasToken: any;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (state: Partial<Store>): DispatchedStateProps => {\n  const result = {\n    hasToken: getHasTokenStatus(state)\n  };\n  return result;\n};\n\n/** map props to actions */\nconst mapDispatchToProps = {\n  setHasTokenStatusActionCreator: setHasTokenStatusAction\n};\n\n/** connect Decimal component to the redux store */\nconst ConnectedHome = connect(mapStateToProps, mapDispatchToProps)(Home);\n\nexport default ConnectedHome;\n","import React from \"react\";\nimport { Row, Col, Button, FormGroup, Label, Input, Form } from \"reactstrap\";\nimport axios from \"axios\";\nimport Cookies from \"universal-cookie\";\nimport { connect } from \"react-redux\";\nimport { Store } from \"redux\";\nimport { getHasTokenStatus } from \"../../store/ducks/jwtInfoState\";\nimport Modal from \"react-bootstrap/Modal\";\nimport { Redirect } from \"react-router-dom\";\nimport MUIDataTable from \"mui-datatables\";\n\ninterface MachineProps {\n  hasToken: boolean;\n}\n\ninterface MachineState {\n  show: boolean;\n  machineName: string;\n  machineCode: string;\n  machineType: string;\n  isUpdate: boolean;\n  machineId: null | string;\n  data: any;\n}\n\nclass Machine extends React.Component<MachineProps, MachineState> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      show: false,\n      machineName: \"\",\n      machineCode: \"\",\n      machineType: \"\",\n      isUpdate: false,\n      machineId: null,\n      data: []\n    };\n  }\n\n  public async componentDidMount() {\n    const cookies = new Cookies();\n    const access_token = cookies.get(\"access_token\");\n    await axios\n      .get(process.env.REACT_APP_BASE_API_URL + \"/machines\", {\n        headers: { \"x-access-token\": access_token }\n      })\n      .then(response => {\n        this.setState({ data: response.data.data || [] });\n      })\n      .catch(error => {\n        if (error.response) {\n          console.log(error.response);\n        }\n      });\n  }\n\n  public handleShow = () => {\n    this.setState({ show: true });\n  };\n\n  public handleDelete = async (event: any) => {\n    const buttonName = event.target.id;\n    const machineId = buttonName.toString().split(\"_\")[2];\n    const cookies = new Cookies();\n    const access_token = cookies.get(\"access_token\");\n\n    if (window.confirm(\"Are you sure?\")) {\n      await axios\n        .delete(process.env.REACT_APP_BASE_API_URL + \"/machines/\" + machineId, {\n          headers: { \"x-access-token\": access_token }\n        })\n        .then(response => {\n          if (response.status === 200) {\n            alert(\"succefully deleted!\");\n            window.location.reload();\n          }\n        })\n        .catch(error => {\n          if (error) {\n            alert(\"An error occured!\");\n          }\n        });\n    }\n  };\n\n  public handleShowEdit = async (event: any) => {\n    const buttonName = event.target.id;\n    const machineId = buttonName.toString().split(\"_\")[2];\n    const cookies = new Cookies();\n    const access_token = cookies.get(\"access_token\");\n\n    await axios\n      .get(process.env.REACT_APP_BASE_API_URL + \"/machines/\" + machineId, {\n        headers: { \"x-access-token\": access_token }\n      })\n      .then(response => {\n        this.setState({\n          machineId: machineId,\n          machineName: response.data.data.name,\n          machineType: response.data.data.type,\n          machineCode: response.data.data.code\n        });\n      })\n      .catch(error => {\n        if (error) {\n          console.log(error);\n          alert(\"An error occured!\");\n        }\n      });\n\n    this.setState({ show: true, isUpdate: true });\n  };\n\n  public handleClose = () => {\n    this.setState({ show: false, isUpdate: false });\n  };\n\n  public handleSubmit = () => {\n    const cookies = new Cookies();\n    const access_token = cookies.get(\"access_token\");\n    if (\n      this.state.machineName === \"\" ||\n      this.state.machineType === \"\" ||\n      this.state.machineCode === \"\"\n    ) {\n      alert(\"Empty field!\");\n    } else {\n      const formData: any = {\n        name: this.state.machineName,\n        type: this.state.machineType,\n        code: this.state.machineCode\n      };\n      axios\n        .post(process.env.REACT_APP_BASE_API_URL + \"/machines\", formData, {\n          headers: { \"x-access-token\": access_token }\n        })\n        .then(response => {\n          console.log(response);\n          if (window.confirm(\"Machine added Successfully!\")) {\n            this.setState({ show: false });\n            window.location.reload();\n          }\n        })\n        .catch(error => {\n          if (error) {\n            if (error.response) {\n              alert(error.response.data.message);\n            } else {\n              alert(\"An Error Occured!\");\n            }\n          }\n        });\n    }\n  };\n\n  public handleUpdate = async () => {\n    const cookies = new Cookies();\n    const access_token = cookies.get(\"access_token\");\n    if (\n      this.state.machineName === \"\" ||\n      this.state.machineType === \"\" ||\n      this.state.machineCode === \"\" ||\n      this.state.machineId === null\n    ) {\n      alert(\"Empty field or Machine Id not found!\");\n    } else {\n      const formData: any = {\n        name: this.state.machineName,\n        type: this.state.machineType,\n        code: this.state.machineCode\n      };\n      await axios\n        .patch(\n          process.env.REACT_APP_BASE_API_URL +\n            \"/machines/\" +\n            this.state.machineId,\n          formData,\n          {\n            headers: { \"x-access-token\": access_token }\n          }\n        )\n        .then(response => {\n          console.log(response);\n          if (window.confirm(\"Machine updated Successfully!\")) {\n            this.setState({ show: false });\n            window.location.reload();\n          }\n        })\n        .catch(error => {\n          if (error) {\n            if (error.response) {\n              alert(error.response.data.message);\n            } else {\n              alert(\"An Error Occured!\");\n            }\n          }\n        });\n    }\n  };\n\n  render() {\n    if (this.props.hasToken === true) {\n      let modalText = \"Enter Machine Info\";\n      if (this.state.isUpdate === true) {\n        modalText = \"Update Machine Info\";\n      }\n\n      const machineList: any = this.state.data;\n      const muiMachineList: any = [];\n      const machineIdList: any = [];\n      let i = 1;\n\n      machineList.forEach((element: any) => {\n        let arr: any = [];\n        arr.push(i++);\n        arr.push(element.name);\n        arr.push(element.type);\n        arr.push(element.code);\n        muiMachineList.push(arr);\n        machineIdList.push(element._id);\n      });\n\n      const columns = [\n        \"#\",\n        \"Machine Type\",\n        \"Machine Name\",\n        \"Machine Code\",\n        {\n          name: \"Action\",\n          options: {\n            filter: false,\n            sort: false,\n            empty: true,\n            customBodyRenderLite: (dataIndex: any, rowIndex: any) => {\n              return (\n                <div>\n                  <Button\n                    id={\"button_edit_\" + machineIdList[rowIndex]}\n                    type=\"submit\"\n                    onClick={(event: any) => this.handleShowEdit(event)}\n                    color=\"warning\"\n                    size=\"sm\"\n                  >\n                    Edit\n                  </Button>{\" \"}\n                  <Button\n                    id={\"button_delete_\" + machineIdList[rowIndex]}\n                    color=\"danger\"\n                    size=\"sm\"\n                    onClick={(event: any) => this.handleDelete(event)}\n                  >\n                    Delete\n                  </Button>\n                </div>\n              );\n            }\n          }\n        }\n      ];\n\n      return (\n        <Row style={{ marginBottom: \"150px\" }}>\n          <Col sm={{ size: 10, order: 2, offset: 1 }}>\n            <br></br>\n            <Button variant=\"primary\" size=\"sm\" onClick={this.handleShow}>\n              Add new machine\n            </Button>\n            <br></br>\n            <br></br>\n            <MUIDataTable\n              title={\"Machine List Table\"}\n              data={muiMachineList}\n              columns={columns}\n              options={{\n                selectableRows: \"none\" // <===== will turn off checkboxes in rows\n              }}\n            />\n\n            <Modal show={this.state.show} onHide={this.handleClose}>\n              <Modal.Header closeButton>\n                <Modal.Title>{modalText}</Modal.Title>\n              </Modal.Header>\n              <Modal.Body>\n                <Form>\n                  <FormGroup row>\n                    <Label for=\"name\" sm={2}>\n                      Name\n                    </Label>\n                    <Col sm={10}>\n                      <Input\n                        type=\"text\"\n                        name=\"name\"\n                        id=\"name\"\n                        placeholder=\"\"\n                        value={this.state.machineName}\n                        onChange={e =>\n                          this.setState({ machineName: e.target.value })\n                        }\n                        required\n                      />\n                    </Col>\n                  </FormGroup>\n                  <FormGroup row>\n                    <Label for=\"type\" sm={2}>\n                      Type\n                    </Label>\n                    <Col sm={10}>\n                      <Input\n                        type=\"text\"\n                        name=\"type\"\n                        id=\"type\"\n                        placeholder=\"\"\n                        value={this.state.machineType}\n                        onChange={e =>\n                          this.setState({ machineType: e.target.value })\n                        }\n                        required\n                      />\n                    </Col>\n                  </FormGroup>\n                  <FormGroup row>\n                    <Label for=\"name\" sm={2}>\n                      Code\n                    </Label>\n                    <Col sm={10}>\n                      <Input\n                        type=\"text\"\n                        name=\"code\"\n                        id=\"code\"\n                        placeholder=\"\"\n                        value={this.state.machineCode}\n                        onChange={e =>\n                          this.setState({ machineCode: e.target.value })\n                        }\n                        required\n                      />\n                    </Col>\n                  </FormGroup>\n                </Form>\n              </Modal.Body>\n              <Modal.Footer>\n                <Button color=\"secondary\" onClick={this.handleClose}>\n                  Close\n                </Button>\n                <Button\n                  type=\"submit\"\n                  onClick={\n                    this.state.isUpdate === true\n                      ? this.handleUpdate\n                      : this.handleSubmit\n                  }\n                  color=\"primary\"\n                >\n                  Save Changes\n                </Button>\n              </Modal.Footer>\n            </Modal>\n          </Col>\n        </Row>\n      );\n    } else {\n      return <Redirect to=\"/home\" />;\n    }\n  }\n}\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  hasToken: any;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (state: Partial<Store>): DispatchedStateProps => {\n  const result = {\n    hasToken: getHasTokenStatus(state)\n  };\n  return result;\n};\n\n/** map props to actions */\nconst mapDispatchToProps = {};\n\n/** connect Decimal component to the redux store */\nconst ConnectedMachine = connect(mapStateToProps, mapDispatchToProps)(Machine);\n\nexport default ConnectedMachine;\n","export const shifts: any = [\n  {\n    value: \"shift_a\",\n    label: \"SHIFT A : 6AM-2PM\"\n  },\n  {\n    value: \"shift_b\",\n    label: \"SHIFT B : 2PM-10PM\"\n  },\n  {\n    value: \"shift_c\",\n    label: \"SHIFT C : 10PM-6AM\"\n  }\n];\n","import * as React from \"react\";\nimport {\n  Button,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  InputGroup,\n  Row,\n  Col,\n  Alert\n} from \"reactstrap\";\nimport Select from \"react-select\";\nimport Cookies from \"universal-cookie\";\nimport axios from \"axios\";\nimport MUIDataTable from \"mui-datatables\";\nimport { shifts } from \"./../../constants\";\n\nexport interface AssignMachineProps {}\n\nexport interface AssignMachineState {\n  isOpen: boolean;\n  operatorList: any;\n  operatorName: string;\n  operatorCode: string;\n  machineList: any;\n  machineId: any;\n  shiftId: any;\n  assignDate: any;\n  isFormSUbmitted: null | boolean;\n  submitMessage: string;\n}\n\nclass AssignMachine extends React.Component<\n  AssignMachineProps,\n  AssignMachineState\n> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      isOpen: false,\n      operatorList: [],\n      operatorName: \"\",\n      operatorCode: \"\",\n      machineList: [],\n      machineId: \"\",\n      shiftId: \"\",\n      assignDate: \"\",\n      isFormSUbmitted: null,\n      submitMessage: \"\"\n    };\n  }\n\n  handleSubmit = (event: any) => {\n    const cookies = new Cookies();\n    const access_token = cookies.get(\"access_token\");\n    event.preventDefault();\n    if (\n      this.state.operatorName === \"\" ||\n      this.state.operatorCode === \"\" ||\n      this.state.machineId === \"\" ||\n      this.state.shiftId === \"\" ||\n      this.state.assignDate === \"\"\n    ) {\n      alert(\"Empty field!\");\n    } else {\n      const formData = {\n        operator_id: this.state.operatorCode,\n        operator_name: this.state.operatorName,\n        machine_id: this.state.machineId.value,\n        machine_code: this.state.machineId.label,\n        shift: this.state.shiftId.value,\n        assigned_date: this.state.assignDate\n      };\n\n      axios\n        .post(process.env.REACT_APP_BASE_API_URL + \"/assign\", formData, {\n          headers: { \"x-access-token\": access_token }\n        })\n        .then(response => {\n          this.setState({\n            isFormSUbmitted: true,\n            operatorName: \"\",\n            operatorCode: \"\",\n            machineId: \"\",\n            shiftId: \"\",\n            assignDate: \"\",\n            submitMessage: response.data.message\n          });\n          window.scrollTo(0, 0);\n        })\n        .catch(error => {\n          console.log(error.response);\n          if (error) {\n            if (error.response.data.status === \"400\") {\n              this.setState({\n                isFormSUbmitted: false,\n                submitMessage: error.response.data.message\n              });\n              window.scrollTo(0, 0);\n            } else {\n              this.setState({\n                isFormSUbmitted: false,\n                submitMessage: \"An Error Occurred!\"\n              });\n              window.scrollTo(0, 0);\n            }\n          }\n        });\n    }\n  };\n\n  updateCategory = (event: any) => {\n    const operatorInfoList = event.target.value.toString().split(\"_\");\n    if (operatorInfoList[0] !== \"\" && operatorInfoList[1] !== \"\") {\n      this.setState({\n        operatorName: operatorInfoList[0],\n        operatorCode: operatorInfoList[1]\n      });\n    }\n  };\n\n  /** sets the value of field element in state\n   * @param {any} event - the onchange input event\n   */\n  private onChangeMachineHandler = (event: any) => {\n    const data = { value: event.value, label: event.label };\n\n    this.setState({ machineId: data });\n  };\n  /** sets the value of field element in state\n   * @param {any} event - the onchange input event\n   */\n  private onChangeShiftHandler = (event: any) => {\n    const data = { value: event.value, label: event.label };\n    this.setState({ shiftId: data });\n  };\n\n  /** sets the value of field element in state\n   * @param {any} event - the onchange input event\n   */\n  private onChangeDateHandler = (event: any) => {\n    this.setState({ assignDate: event.currentTarget.value });\n  };\n\n  public async componentDidMount() {\n    const cookies = new Cookies();\n    const access_token = cookies.get(\"access_token\");\n    await axios\n      .get(process.env.REACT_APP_BASE_API_URL + \"/users/operator\", {\n        headers: { \"x-access-token\": access_token }\n      })\n      .then(response => {\n        this.setState({ operatorList: response.data.data || [] });\n      })\n      .catch(error => {\n        if (error.response) {\n          console.log(error.response);\n        }\n      });\n\n    await axios\n      .get(process.env.REACT_APP_BASE_API_URL + \"/machines\", {\n        headers: { \"x-access-token\": access_token }\n      })\n      .then(response => {\n        this.setState({ machineList: response.data.data || [] });\n      })\n      .catch(error => {\n        if (error.response) {\n          console.log(error.response);\n        }\n      });\n  }\n\n  render() {\n    const operatorList: any = this.state.operatorList;\n    const machineList: any = this.state.machineList;\n    const selectedMachineValue: any = this.state.machineId;\n    const selectedShiftValue: any = this.state.shiftId;\n    const defaultAssignDateValue: any = this.state.assignDate;\n    const isFormSubmitted = this.state.isFormSUbmitted;\n    const alertMessage = this.state.submitMessage;\n    const muiOperatorList: any = [];\n\n    operatorList.forEach((element: any) => {\n      let arr: any = [];\n      arr.push(element.count);\n      arr.push(element.name);\n      arr.push(element.id);\n      muiOperatorList.push(arr);\n    });\n\n    const machineListOptions: any = [];\n    machineList.map((elem: any) => {\n      return machineListOptions.push({\n        label: elem.name + \"/\" + elem.code,\n        value: elem._id\n      });\n    });\n\n    const columns = [\n      \"#\",\n      \"Operator Name\",\n      \"Operator Code\",\n      {\n        name: \"Assign\",\n        options: {\n          filter: false,\n          sort: false,\n          empty: true,\n          customBodyRenderLite: (dataIndex: any, rowIndex: any) => {\n            return (\n              <div>\n                <FormGroup check>\n                  <Input\n                    type=\"radio\"\n                    value={\n                      muiOperatorList[rowIndex][1] +\n                      \"_\" +\n                      muiOperatorList[rowIndex][2]\n                    }\n                    name=\"radio1\"\n                    onChange={this.updateCategory}\n                  />\n                </FormGroup>\n              </div>\n            );\n          }\n        }\n      }\n    ];\n\n    return (\n      <Row style={{ marginBottom: \"150px\" }}>\n        <Col sm={{ size: 10, order: 2, offset: 1 }}>\n          <br></br>\n          {isFormSubmitted !== null &&\n            (isFormSubmitted === true ? (\n              <Alert color=\"success\">{alertMessage}</Alert>\n            ) : (\n              <Alert color=\"danger\">{alertMessage}</Alert>\n            ))}\n          <h3>Assign Machine To an Operator</h3>\n          <hr></hr>\n          <br></br>\n        </Col>\n        <Col\n          sm={{ size: 5, order: 2, offset: 1 }}\n          style={{ marginBottom: \"20px\" }}\n        >\n          <MUIDataTable\n            title={\"Operator List Table\"}\n            data={muiOperatorList}\n            columns={columns}\n            options={{\n              selectableRows: \"none\" // <===== will turn off checkboxes in rows\n            }}\n          />\n        </Col>\n        <Col sm={{ size: 4, order: 2, offset: 1 }} className=\"formFieldBody\">\n          <h4>Assign Form</h4>\n          <Form onSubmit={this.handleSubmit}>\n            <FormGroup>\n              <Label for=\"machineCode\">Machine Name/Code </Label>\n              <Select\n                multi={false}\n                name=\"machineCode\"\n                id=\"machineCode\"\n                options={machineListOptions}\n                value={selectedMachineValue || \"\"}\n                onChange={this.onChangeMachineHandler}\n              />\n            </FormGroup>\n            <FormGroup>\n              <Label for=\"assignDate\">Assigned date </Label>\n              <InputGroup size=\"sm\">\n                <Input\n                  type=\"date\"\n                  id=\"assignDate\"\n                  name=\"assignDate\"\n                  value={defaultAssignDateValue}\n                  onChange={this.onChangeDateHandler}\n                />\n              </InputGroup>\n            </FormGroup>\n            <FormGroup>\n              <Label for=\"shift\">Shift </Label>\n              <Select\n                multi={false}\n                name=\"shift\"\n                id=\"shift\"\n                options={shifts}\n                value={selectedShiftValue || \"\"}\n                onChange={this.onChangeShiftHandler}\n              />\n            </FormGroup>\n            <FormGroup>\n              <Label for=\"operatorName\">Operator Name</Label>\n              <InputGroup size=\"sm\">\n                <Input\n                  type=\"text\"\n                  readOnly\n                  name=\"operatorName\"\n                  id=\"operatorName\"\n                  value={this.state.operatorName}\n                />\n              </InputGroup>\n            </FormGroup>\n            <FormGroup>\n              <Label for=\"operatorCode\">Operator Code</Label>\n              <InputGroup size=\"sm\">\n                <Input\n                  type=\"text\"\n                  readOnly\n                  name=\"operatorCode\"\n                  id=\"operatorCode\"\n                  value={this.state.operatorCode}\n                />\n              </InputGroup>\n            </FormGroup>\n\n            <Button type=\"submit\">Submit</Button>\n          </Form>\n        </Col>\n      </Row>\n    );\n  }\n}\n\nexport default AssignMachine;\n","import * as React from \"react\";\nimport MUIDataTable from \"mui-datatables\";\nimport axios from \"axios\";\nimport Cookies from \"universal-cookie\";\nimport { Row, Col } from \"reactstrap\";\nimport { connect } from \"react-redux\";\nimport { Redirect } from \"react-router-dom\";\nimport { Store } from \"redux\";\nimport { getHasTokenStatus } from \"../../store/ducks/jwtInfoState\";\n\nexport interface AssignListProps {\n  hasToken: boolean;\n}\n\nexport interface AssignListState {\n  data: any;\n}\n\nclass AssignList extends React.Component<AssignListProps, AssignListState> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      data: []\n    };\n  }\n\n  public async componentDidMount() {\n    const cookies = new Cookies();\n    const access_token = cookies.get(\"access_token\");\n    await axios\n      .get(process.env.REACT_APP_BASE_API_URL + \"/assign/all\", {\n        headers: { \"x-access-token\": access_token }\n      })\n      .then(response => {\n        this.setState({ data: response.data.data || [] });\n      })\n      .catch(error => {\n        if (error.response) {\n          console.log(error.response);\n        }\n      });\n  }\n\n  render() {\n    if (this.props.hasToken === true) {\n      const columns = [\n        \"#\",\n        \"Machine No\",\n        \"Schedule\",\n        \"Operator Code\",\n        \"Operator Name\",\n        \"Activated Date\"\n      ];\n      const assignList: any = this.state.data;\n      const muiAssignList: any = [];\n\n      let i = 1;\n      assignList.forEach((element: any) => {\n        let arr: any = [];\n        arr.push(i++);\n        arr.push(element.machine_code);\n\n        if (element.shift === \"shift_a\") {\n          arr.push(\"SHIFT A : 6AM-2PM\");\n        } else if (element.shift === \"shift_b\") {\n          arr.push(\"SHIFT B : 2PM-10PM\");\n        } else {\n          arr.push(\"SHIFT C : 10PM-6AM\");\n        }\n\n        arr.push(element.operator_id);\n        arr.push(element.operator_name);\n        arr.push(element.assigned_date);\n        muiAssignList.push(arr);\n      });\n\n      return (\n        <Row style={{ marginBottom: \"150px\" }}>\n          <Col sm={{ size: 10, order: 2, offset: 1 }}>\n            <br></br>\n            <br></br>\n            <MUIDataTable\n              title={\"Assign List Table\"}\n              data={muiAssignList}\n              columns={columns}\n              options={{\n                selectableRows: \"none\"\n              }}\n            />\n          </Col>\n        </Row>\n      );\n    } else {\n      return <Redirect to=\"/home\" />;\n    }\n  }\n}\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  hasToken: any;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (state: Partial<Store>): DispatchedStateProps => {\n  const result = {\n    hasToken: getHasTokenStatus(state)\n  };\n  return result;\n};\n\n/** map props to actions */\nconst mapDispatchToProps = {};\n\n/** connect Decimal component to the redux store */\nconst ConnectedAssignList = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(AssignList);\n\nexport default ConnectedAssignList;\n","import * as React from \"react\";\nimport MUIDataTable from \"mui-datatables\";\nimport axios from \"axios\";\nimport Cookies from \"universal-cookie\";\nimport { Row, Col } from \"reactstrap\";\nimport { connect } from \"react-redux\";\nimport { Redirect } from \"react-router-dom\";\nimport { Store } from \"redux\";\nimport { getHasTokenStatus } from \"../../store/ducks/jwtInfoState\";\nimport { FormGroup, Label, Input, InputGroup, Button } from \"reactstrap\";\n\nexport interface OperatorListProps {\n  hasToken: boolean;\n}\n\nexport interface OperatorListState {\n  data: any;\n  start_date: any;\n  end_date: any;\n}\n\nclass OperatorList extends React.Component<\n  OperatorListProps,\n  OperatorListState\n> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      data: [],\n      start_date: \"2020-01-01\",\n      end_date: \"2020-12-31\"\n    };\n  }\n\n  public async componentDidMount() {\n    await this.getOperatorList(this.state.start_date, this.state.end_date);\n  }\n\n  private onChangeStartDateHandler = (event: any) => {\n    this.setState({ start_date: event.currentTarget.value });\n  };\n  private onChangeEndDateHandler = (event: any) => {\n    this.setState({ end_date: event.currentTarget.value });\n  };\n\n  public submitFilter = () => {\n    this.getOperatorList(this.state.start_date, this.state.end_date);\n  };\n\n  public async getOperatorList(startDate: string, endDate: string) {\n    const formData = {\n      start_date: startDate,\n      end_date: endDate\n    };\n    const cookies = new Cookies();\n    const access_token = cookies.get(\"access_token\");\n    await axios\n      .post(\n        process.env.REACT_APP_BASE_API_URL + \"/assign/operator-list\",\n        formData,\n        {\n          headers: { \"x-access-token\": access_token }\n        }\n      )\n      .then(response => {\n        this.setState({ data: response.data.data || [] });\n      })\n      .catch(error => {\n        if (error.response) {\n          console.log(error.response);\n        }\n      });\n  }\n\n  render() {\n    if (this.props.hasToken === true) {\n      const columns = [\n        \"#\",\n        \"Machine No\",\n        \"Schedule\",\n        \"Operator Code\",\n        \"Operator Name\",\n        \"Activated Date\"\n      ];\n      const assignList: any = this.state.data;\n      const muiAssignList: any = [];\n\n      let i = 1;\n      assignList.forEach((element: any) => {\n        let arr: any = [];\n        arr.push(i++);\n        arr.push(element.machine_code);\n\n        if (element.shift === \"shift_a\") {\n          arr.push(\"SHIFT A : 6AM-2PM\");\n        } else if (element.shift === \"shift_b\") {\n          arr.push(\"SHIFT B : 2PM-10PM\");\n        } else {\n          arr.push(\"SHIFT C : 10PM-6AM\");\n        }\n\n        arr.push(element.operator_id);\n        arr.push(element.operator_name);\n        arr.push(element.assigned_date);\n        muiAssignList.push(arr);\n      });\n\n      return (\n        <Row style={{ marginBottom: \"150px\" }}>\n          <Col sm={{ size: 3, offset: 1 }}>\n            <br></br>\n            <FormGroup>\n              <Label for=\"startDate\">Start date </Label>\n              <InputGroup size=\"sm\">\n                <Input\n                  type=\"date\"\n                  value={this.state.start_date}\n                  id=\"startDate\"\n                  name=\"startDate\"\n                  onChange={this.onChangeStartDateHandler}\n                />\n              </InputGroup>\n            </FormGroup>\n          </Col>\n          <Col sm={{ size: 3 }}>\n            <br></br>\n            <FormGroup>\n              <Label for=\"endDate\">End date </Label>\n              <InputGroup size=\"sm\">\n                <Input\n                  type=\"date\"\n                  value={this.state.end_date}\n                  id=\"endDate\"\n                  name=\"endDate\"\n                  onChange={this.onChangeEndDateHandler}\n                />\n              </InputGroup>\n            </FormGroup>\n          </Col>\n          <Col sm={{ size: 1 }}>\n            <br></br>\n            <br></br>\n            <Button onClick={this.submitFilter}>Filter</Button>\n          </Col>\n          <Col sm={{ size: 10, order: 2, offset: 1 }}>\n            <br></br>\n            <MUIDataTable\n              title={\"Operator List Table\"}\n              data={muiAssignList}\n              columns={columns}\n              options={{\n                selectableRows: \"none\"\n              }}\n            />\n          </Col>\n        </Row>\n      );\n    } else {\n      return <Redirect to=\"/home\" />;\n    }\n  }\n}\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  hasToken: any;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (state: Partial<Store>): DispatchedStateProps => {\n  const result = {\n    hasToken: getHasTokenStatus(state)\n  };\n  return result;\n};\n\n/** map props to actions */\nconst mapDispatchToProps = {};\n\n/** connect Decimal component to the redux store */\nconst ConnectedOperatorList = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(OperatorList);\n\nexport default ConnectedOperatorList;\n","import React from \"react\";\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink\n} from \"reactstrap\";\nimport Cookies from \"universal-cookie\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { NavLink as RRNavLink } from \"react-router-dom\";\nimport Register from \"../Register\";\nimport Login from \"../Login\";\nimport Logout from \"../Logout\";\nimport Home from \"../Home\";\nimport Machine from \"../Machine\";\nimport AssignMachine from \"../AssignMachine\";\nimport AssignList from \"../AssignList\";\nimport OperatorList from \"../OperatorList\";\nimport { connect } from \"react-redux\";\nimport { Store } from \"redux\";\nimport {\n  getHasTokenStatus,\n  setHasTokenStatusAction\n} from \"../../store/ducks/jwtInfoState\";\n\ninterface NavProps {\n  setHasTokenStatusActionCreator: typeof setHasTokenStatusAction;\n  hasToken: boolean;\n}\n\ninterface NavBarState {\n  isOpen: boolean;\n}\n\nclass NavBar extends React.Component<NavProps, NavBarState> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      isOpen: false\n    };\n    this.toggle = this.toggle.bind(this);\n  }\n\n  toggle() {\n    this.setState({\n      isOpen: !this.state.isOpen\n    });\n  }\n\n  public componentDidMount() {\n    const cookies = new Cookies();\n    const access_token = cookies.get(\"access_token\");\n\n    if (access_token === null || access_token === undefined) {\n      this.props.setHasTokenStatusActionCreator(false);\n    } else {\n      this.props.setHasTokenStatusActionCreator(true);\n    }\n  }\n\n  render() {\n    const cookies = new Cookies();\n    const user_type = cookies.get(\"user_type\");\n    if (this.props.hasToken === true) {\n      if (user_type === \"admin\") {\n        return (\n          <Router>\n            <Navbar\n              color=\"dark\"\n              dark\n              className=\"justify-content-between\"\n              expand=\"md\"\n            >\n              <NavbarBrand href=\"/home\">The Machine Assign App</NavbarBrand>\n              <NavbarToggler onClick={this.toggle} />\n              <Collapse isOpen={this.state.isOpen} navbar>\n                <Nav className=\"ml-auto\" navbar>\n                  <NavItem>\n                    <NavLink\n                      to=\"/machines\"\n                      activeClassName=\"active\"\n                      tag={RRNavLink}\n                    >\n                      Machines\n                    </NavLink>\n                  </NavItem>\n                  <NavItem>\n                    <NavLink\n                      to=\"/assign\"\n                      activeClassName=\"active\"\n                      tag={RRNavLink}\n                    >\n                      Assign Machines\n                    </NavLink>\n                  </NavItem>\n                  <NavItem>\n                    <NavLink\n                      to=\"/assign-list\"\n                      activeClassName=\"active\"\n                      tag={RRNavLink}\n                    >\n                      Assign List\n                    </NavLink>\n                  </NavItem>\n                  <NavItem>\n                    <NavLink\n                      to=\"/logout\"\n                      activeClassName=\"active\"\n                      tag={RRNavLink}\n                    >\n                      Logout\n                    </NavLink>\n                  </NavItem>\n                </Nav>\n              </Collapse>\n            </Navbar>\n            <Switch>\n              {/* Forward Public Routes to the Home Page */}\n              <Route exact path=\"/login\" component={Home} />\n              <Route exact path=\"/operator-list\" component={Home} />\n\n              <Route exact path=\"/assign\" component={AssignMachine} />\n              <Route exact path=\"/assign-list\" component={AssignList} />\n              <Route exact path=\"/machines\" component={Machine} />\n              <Route exact path=\"/logout\" component={Logout} />\n              <Route exact path=\"/home\" component={Home} />\n            </Switch>\n          </Router>\n        );\n      } else {\n        return (\n          <Router>\n            <Navbar\n              color=\"dark\"\n              dark\n              className=\"justify-content-between\"\n              expand=\"md\"\n            >\n              <NavbarBrand href=\"/home\">The Machine Assign App</NavbarBrand>\n              <NavbarToggler onClick={this.toggle} />\n              <Collapse isOpen={this.state.isOpen} navbar>\n                <Nav className=\"ml-auto\" navbar>\n                  <NavItem>\n                    <NavLink\n                      to=\"/operator-list\"\n                      activeClassName=\"active\"\n                      tag={RRNavLink}\n                    >\n                      Operator List\n                    </NavLink>\n                  </NavItem>\n                  <NavItem>\n                    <NavLink\n                      to=\"/logout\"\n                      activeClassName=\"active\"\n                      tag={RRNavLink}\n                    >\n                      Logout\n                    </NavLink>\n                  </NavItem>\n                </Nav>\n              </Collapse>\n            </Navbar>\n            <Switch>\n              {/* Forward Public Routes to the Home Page */}\n              <Route exact path=\"/login\" component={Home} />\n\n              {/* Forward Private Routes to the Home Page */}\n              <Route exact path=\"/assign\" component={Home} />\n              <Route exact path=\"/assign-list\" component={Home} />\n              <Route exact path=\"/machines\" component={Home} />\n\n              <Route exact path=\"/operator-list\" component={OperatorList} />\n              <Route exact path=\"/logout\" component={Logout} />\n              <Route exact path=\"/home\" component={Home} />\n            </Switch>\n          </Router>\n        );\n      }\n    } else {\n      return (\n        <Router>\n          <Navbar\n            color=\"dark\"\n            className=\"justify-content-between\"\n            dark\n            expand=\"md\"\n          >\n            <NavbarBrand href=\"/home\">The Machine Assign App</NavbarBrand>\n            <NavbarToggler onClick={this.toggle} />\n            <Collapse isOpen={this.state.isOpen} navbar>\n              <Nav className=\"ml-auto\" navbar>\n                <NavItem>\n                  <NavLink to=\"/login\" activeClassName=\"active\" tag={RRNavLink}>\n                    Login\n                  </NavLink>\n                </NavItem>\n                <NavItem>\n                  <NavLink\n                    to=\"/register\"\n                    activeClassName=\"active\"\n                    tag={RRNavLink}\n                  >\n                    Register\n                  </NavLink>\n                </NavItem>\n              </Nav>\n            </Collapse>\n          </Navbar>\n          <Switch>\n            {/* Forward Private Routes to the Home Page */}\n            <Route exact path=\"/products\" component={Home} />\n            <Route exact path=\"/assign\" component={Home} />\n            <Route exact path=\"/assign-list\" component={Home} />\n            <Route exact path=\"/operator-list\" component={Home} />\n            <Route exact path=\"/machines\" component={Home} />\n\n            <Route exact path=\"/register\" component={Register} />\n            <Route exact path=\"/login\" component={Login} />\n            <Route exact path=\"/home\" component={Home} />\n          </Switch>\n        </Router>\n      );\n    }\n  }\n}\n\n/** connect the component to the store */\n\n/** Interface to describe props from mapStateToProps */\ninterface DispatchedStateProps {\n  hasToken: any;\n}\n\n/** Map props to state  */\nconst mapStateToProps = (state: Partial<Store>): DispatchedStateProps => {\n  const result = {\n    hasToken: getHasTokenStatus(state)\n  };\n  return result;\n};\n\n/** map props to actions */\nconst mapDispatchToProps = {\n  setHasTokenStatusActionCreator: setHasTokenStatusAction\n};\n\n/** connect Decimal component to the redux store */\nconst ConnectedNavBar = connect(mapStateToProps, mapDispatchToProps)(NavBar);\n\nexport default ConnectedNavBar;\n","import React from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport NavBar from \"./component/Nav\";\n\nconst footerStyle = {\n  position: \"absolute\",\n  backgroundColor: \"#f5f5f5\",\n  fontSize: \"20px\",\n  color: \"white\",\n  borderTop: \"1px solid #E7E7E7\",\n  textAlign: \"center\",\n  padding: \"15px\",\n  left: \"0\",\n  bottom: \"0\",\n  height: \"100%\",\n  width: \"100%\",\n  textColor: \"black\"\n} as React.CSSProperties;\n\nconst baseStyle = {\n  position: \"fixed\",\n  left: \"0\",\n  bottom: \"0\",\n  width: \"100%\",\n  height: \"45px\"\n} as React.CSSProperties;\n\nclass App extends React.Component<{}, {}> {\n  render() {\n    return (\n      <div className={\"root\"} key=\"1\">\n        <NavBar />\n\n        <div style={baseStyle} className=\"footer\">\n          <div style={footerStyle}>\n            <p style={{ color: \"grey\", fontSize: \"12px\" }}>\n              © 2020 Copyright : The Machine Assign App\n            </p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createStore, Store } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport reducer, { JwtInfoState } from \"./ducks/jwtInfoState\";\n\n/** The initial store */\nconst store: Store & JwtInfoState = createStore(reducer, composeWithDevTools());\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport store from \"../src/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}